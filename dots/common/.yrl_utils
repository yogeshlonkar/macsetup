# vim: set ft=bash:
# utility functions
function fstrigger()
{
  local to_watch to_execute red green
  if [[ -f ${1} || -d ${1} ]]; then
     to_watch=${1}
     to_execute=${@:2}
  else
    to_watch=$(pwd)
    to_execute=${@}
  fi
  red='\033[1;31m'
  green='\033[1;32m'
  echo "Watching ${to_watch}"
  while fswatch -e '*.swp' -1 -xnr ${to_watch} >/dev/null 2>&1; do
    echo -e "\033[1;36mFile change triggered\033[0m"
    color=${red}
    eval "${to_execute[@]}" && color=${green} || true
    echo -e "\n${color}Trigger finished\033[0m\n"
  done
}

function sanitize()
{
  for fname in "${@}"
  do
    gcat -v ${fname} | sed 's/M-BM-//g' > ${fname}.bkp
    mv ${fname}.bkp ${fname}
  done
}

function check_op_session()
{
  source ~/.yrl_environment
  curr_time=$(date +%s)
  time_left=$(( $OP_SESSION_TIME - $curr_time ))
  if [[ -z "${OP_SESSION_my}" ]] || (( $time_left < 60 )); then
    unset OP_SESSION_my
    while [[ -z "$OP_SESSION_my" ]]; do
      OP_SESSION_my=$(op signin my --output=raw)
    done
    export OP_SESSION_my=$OP_SESSION_my
    export OP_SESSION_TIME=$(( $curr_time + 1800 ))
    sed -i -e "s/export OP_SESSION_my=.*/export OP_SESSION_my=$OP_SESSION_my/g" ~/.yrl_environment
    sed -i -e "s/export OP_SESSION_TIME=.*/export OP_SESSION_TIME=$OP_SESSION_TIME/g" ~/.yrl_environment
  fi
}

function mfa()
{
  check_op_session
  echo "MFA copied, valid for $(expr 30 - $(date +%s) % 30)s"
  op get totp rkdtjsgg4raf3p4b2zlxvpskay | pbcopy
}

function getgpgpass()
{
  check_op_session
  op get item "GPG Passphrase" | jq -r '.details.password' | pbcopy
}

function dazn_aws_set_env()
{
  mfa
  if [[ -z ${1} ]]; then
    acc=dazn-payments-dev
  else
    acc=${1}
  fi
  echo "Using ${acc}"
  dazn aws exec -p ${acc} -- echo ""
  eval "$(dazn aws exec -p ${acc} -- printenv | grep AWS_ | sed 's/^/export /g')"
}

function git_branch_cleanup()
{
  if [[ "${1}" == "-f" ]]; then
    git branch -va | grep gone | awk '{print $1}' | xargs git branch -D
  else
    git branch -va | grep gone
    if [[ `git branch -va | grep gone | wc -l` -gt 0 ]]; then
      local answer
      if [ -n "$ZSH_VERSION" ]; then
        read -q "answer?Delete all of these?"
      else
        read -p "Delete all of these?" answer
      fi
      echo -en "\n"
      case $answer in
        [Yy]* ) git branch -va | grep gone | awk '{print $1}' | xargs git branch -D;
      esac
    fi
  fi
}

function touchy()
{
  local files=$(echo ${@} | sed -e 's/^[+-=][rstwxXugo]* //g')
  local chmod_flags=$(echo ${@} | sed -e 's/^\([+-=][rstwxXugo]*\) .*/\1/g')
  # echo "Files $files"
  # echo "chmod_flags $chmod_flags"
  touch "${files}"
  if [[ -n "${chmod_flags}" ]]; then
    chmod "${chmod_flags}" "${files}"
  fi
}

function _print_script_with_sources()
{
  local script_to_read=$(eval "realpath ${1}" 2>/dev/null)
  local padding=${2}
  if ! [[ -f "${script_to_read}" ]]; then
    1>&2 echo -e "Usage:\n_print_script_with_sources path/to/script"
    return 1
  fi

  IFS=''
  cat "${script_to_read}" | while read linex; do
    if [[ "${linex}" = *"source "* ]]; then
      local sourced_file=$(echo -e "${linex}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^source[[:space:]]*\([^ *]\)/\1/g')
      sourced_file=$(eval "realpath ${sourced_file}" 2>/dev/null)
      if [[ -f "${sourced_file}" ]]; then
        echo -e "${padding}# ${linex}"
        _print_script_with_sources "${sourced_file}" "${padding}   "
        continue
      fi
    fi
    echo -e "${padding}${linex}"
  done
}

function _bash_profile()
{
  _print_script_with_sources ~/.bash_profile
}

function help()
{
  bash -c "help $@"
}
